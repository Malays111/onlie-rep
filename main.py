import asyncio
import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.enums import ContentType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8219940488:AAEJBcxzzTLYNDK_99MLbB730mKxbSnEpIo"

# ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID)
OWNER_ID = 8237632695  # –ü—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID

# ID —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
REPUTATION_CHAT_ID = -1003157897257
def save_data():
    data = {
        'reputation': reputation,
        'pending_reviews': pending_reviews
    }
    with open('bot_data.json', 'w') as f:
        json.dump(data, f)

def load_data():
    global reputation, pending_reviews
    try:
        with open('bot_data.json', 'r') as f:
            data = json.load(f)
            reputation = data.get('reputation', {'good': 0, 'bad': 0, 'last_review': {'date': '–ù–µ—Ç', 'content': '–ù–µ—Ç'}})
            pending_reviews = data.get('pending_reviews', {})
    except FileNotFoundError:
        pass
REPUTATION_MESSAGE_ID = 49

# Webhook
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

async def update_reputation_message():
    total = reputation['good'] + reputation['bad']
    average = (reputation['good'] / total * 100) if total > 0 else 0
    average_10 = (reputation['good'] / total * 10) if total > 0 else 0
    text = f"""<b>–†–µ–ø—É—Ç–∞—Ü–∏—è: Roeev | Work / @Roeev</b>

‚úÖ <b>–•–æ—Ä–æ—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤:</b> {reputation['good']}
‚ùå <b>–ü–ª–æ—Ö–∏—Ö –æ—Ç–∑—ã–≤–æ–≤:</b> {reputation['bad']}
üìä <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {average:.1f}% (–∏–ª–∏ {average_10:.1f}/10)
üìà <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {total}

üîπ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤:</b> {reputation['last_review']['date']} ‚Äî "{reputation['last_review']['content']}"
üîπ <b>–¢—Ä–µ–Ω–¥ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:</b> ‚ÜîÔ∏è —Å—Ç–∞–±–∏–ª—å–Ω–æ
üîπ <i>–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç:</i> {average:.1f}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        await bot.edit_message_text(
            chat_id=REPUTATION_CHAT_ID,
            message_id=REPUTATION_MESSAGE_ID,
            text=text,
            parse_mode='HTML'
        )
        print("–†–µ–ø—É—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {e}")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: reply_message_id -> {'original_user_id': id, 'text': text, 'username': username, 'type': 'good' or 'bad'}
pending_reviews = {}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
reputation = {'good': 0, 'bad': 0, 'last_review': {'date': '–ù–µ—Ç', 'content': '–ù–µ—Ç'}}
load_data()

@dp.message()
async def handle_messages(message: Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: content_type={message.content_type}, text={message.text}, from_user={message.from_user}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.content_type in [ContentType.NEW_CHAT_MEMBERS, ContentType.LEFT_CHAT_MEMBER]:
        try:
            await message.delete()
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–∑—ã–≤
    if message.text and not message.text.startswith('/'):
        text_lower = message.text.lower()
        good_words = ['–∞—Ö—É–µ–Ω–Ω—ã–π', '—Ç–æ–ø', '–∫—Ä—É—Ç–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '—Å–ø–∞—Å–∏–±–æ', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '+rep', '+ rep', '+—Ä–µ–ø', '+ —Ä–µ–ø']
        bad_words = ['—Ö—É–π–Ω—è', '–Ω–∞–µ–±–∞–ª', '–ø–ª–æ—Ö–æ', '–æ—Ç—Å—Ç–æ–π', '—Ä–∞–∑–≤–æ–¥', '–º–æ—à–µ–Ω–Ω–∏–∫', '-rep', '- rep', '-—Ä–µ–ø', '- —Ä–µ–ø']
        is_good = any(word in text_lower for word in good_words)
        is_bad = any(word in text_lower for word in bad_words)
        if is_bad:
            # –ü–ª–æ—Ö–æ–π –æ—Ç–∑—ã–≤, –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            try:
                reply_msg = await message.reply("–í–∞—à –æ—Ç–∑—ã–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω,—Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ,—Å–µ–π—á–∞—Å –ø—Ä–∏–π–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ")
                pending_reviews[reply_msg.message_id] = {
                    'original_user_id': message.from_user.id,
                    'text': message.text,
                    'username': message.from_user.username or message.from_user.first_name,
                    'type': 'bad'
                }
                save_data()
                await message.delete()  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                print("–ü–ª–æ—Ö–æ–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        elif is_good:
            # –•–æ—Ä–æ—à–∏–π –æ—Ç–∑—ã–≤, —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä—è–µ–º
            try:
                username = message.from_user.username or message.from_user.first_name
                await bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{username} {message.text} (—Ö–æ—Ä–æ—à–∏–π –æ—Ç–∑—ã–≤)"
                )
                reputation['good'] += 1
                reputation['last_review'] = {
                    'date': datetime.now().strftime("%d.%m.%Y"),
                    'content': f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{username} {message.text}"
                }
                save_data()
                await update_reputation_message()
                await message.delete()
                print("–•–æ—Ä–æ—à–∏–π –æ—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞: {e}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /confirm –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.text == "/confirm" and message.from_user.id == OWNER_ID and message.reply_to_message and message.reply_to_message.from_user.id == bot.id and message.reply_to_message.message_id in pending_reviews:
        try:
            data = pending_reviews[message.reply_to_message.message_id]
            await bot.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{data['username']} {data['text']} (–æ–¥–æ–±—Ä–µ–Ω)"
            )
            if data['type'] == 'bad':
                reputation['bad'] += 1
            reputation['last_review'] = {
                'date': datetime.now().strftime("%d.%m.%Y"),
                'content': f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{data['username']} {data['text']}"
            }
            save_data()
            await update_reputation_message()
            del pending_reviews[message.reply_to_message.message_id]
            await message.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            print("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /del –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.text == "/del" and message.from_user.id == OWNER_ID and message.reply_to_message and message.reply_to_message.from_user.id == bot.id and message.reply_to_message.message_id in pending_reviews:
        try:
            data = pending_reviews[message.reply_to_message.message_id]
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await bot.send_message(
                chat_id=data['original_user_id'],
                text="–≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω,—Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π"
            )
            await bot.delete_message(chat_id=message.chat.id, message_id=message.reply_to_message.message_id)
            del pending_reviews[message.reply_to_message.message_id]
            save_data()
            await message.delete()  # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            print("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
    # –ö–æ–º–∞–Ω–¥–∞ /init_rep –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if message.text == "/init_rep" and message.from_user.id == OWNER_ID:
        try:
            msg = await bot.send_message(
                chat_id=REPUTATION_CHAT_ID,
                text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏..."
            )
            await message.reply(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {msg.message_id}. –û–±–Ω–æ–≤–∏—Ç–µ REPUTATION_MESSAGE_ID –≤ –∫–æ–¥–µ –Ω–∞ {msg.message_id}.")
            print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å ID {msg.message_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

async def main():
    if WEBHOOK_URL:
        # Webhook mode
        await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
        app = web.Application()
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=dp,
            bot=bot,
        )
        webhook_requests_handler.register(app, path=WEBHOOK_PATH)
        setup_application(app, dp, bot=bot)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
        await site.start()
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook")
        # Keep the event loop running
        await asyncio.EventLoop().create_future()
    else:
        # Polling mode for local testing
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç polling...")
        await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())